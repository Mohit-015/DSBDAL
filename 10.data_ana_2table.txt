import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Dataset for Study Hours vs Pass/Fail
data = {
    'Study Hours': [29, 15, 33, 48, 39],
    'Pass/Fail': [0, 0, 1, 1, 1]  # 0 = Fail, 1 = Pass
}

# Convert the data into a DataFrame
df = pd.DataFrame(data)

# Display the dataset
print("Dataset:\n", df)

# 1. Define the feature (X) and target (y)
X = df[['Study Hours']]  # Feature (Study Hours)
y = df['Pass/Fail']  # Target (Pass/Fail)

# 2. Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Create a Logistic Regression model
model = LogisticRegression()

# 4. Train the model using the training data
model.fit(X_train, y_train)

# 5. Predict the outcome for Study Hours 25 and 42
study_hours = [[25], [42]]  # Predict for 25 and 42 hours of study
predictions = model.predict(study_hours)

print("\nPredictions for Study Hours 25 and 42:", predictions)

# 6. Make predictions on the test set
y_pred = model.predict(X_test)

# 7. Compute the Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

# 8. Compute Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)

# 9. Compute Error Rate
error_rate = 1 - accuracy
print("\nError Rate:", error_rate)

# 10. Compute Precision
precision = precision_score(y_test, y_pred)
print("\nPrecision:", precision)

# 11. Compute Recall
recall = recall_score(y_test, y_pred)
print("\nRecall:", recall)
